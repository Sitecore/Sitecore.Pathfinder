<configuration xmlns:patch="http://www.sitecore.net/xmlconfig/" xmlns:set="http://www.sitecore.net/xmlconfig/set/">
  <sitecore>
    <dataProviders>
      <json type="Sitecore.Data.DataProviders.JsonDataProvider, Sitecore.JsonDataProvider">
        <param connectionStringName="$(1)" />
        <param desc="databaseName">$(1)</param>
        <param desc="betterMerging">true</param>

        <FileMappingTypes hint="raw:AddFileMappingType">
          <DefaultMapping      type="Sitecore.Data.Mappings.DefaultMapping,      Sitecore.JsonDataProvider" />
          <ItemChildrenMapping type="Sitecore.Data.Mappings.ItemChildrenMapping, Sitecore.JsonDataProvider" />
        </FileMappingTypes>

        <!--  IGNORE FIELDS
              Global list for fields to be ignored during serialization 
              
              When the 'defaultValue' attribute is specified, the field is still not stored in json file, 
              but during deserialization the value is taken according to the 'defaultValue' attribute value. 
              Empty string value of 'defaultValue' attribute means empty string which is not the same as 
              missing 'defaultValue' attribute.
              
              When the 'defaultValue' attribute is specified, the 'type' attribute is taken into account.
              When the 'type' attribute is not specified, it is considered that field is shared. Possible 
              values of the 'type' attribute are: shared, unversioned, versioned
          -->
        <IgnoreFields hint="raw:AddIgnoreField">
          <!-- absolutely useless during development -->
          <Lock>{001DD393-96C5-490B-924A-B0F25CD9EFD8}</Lock>
          <!-- required for /issues/1 -->
          <Style defaultValue="color: #780000; border-left: solid 2px #780000 ; padding-left: 5px;" fieldID="{A791F095-2521-4B4D-BEF9-21DDA221F608}"/>

          <!--          
          <Owner type="versioned" defaultValue="sitecore\admin">{52807595-0F8F-4B20-8D2A-CB71D28C6103}</Owner>
          <Updated type="versioned" defaultValue="$(now)">{D9CF14B1-FA16-4BA6-9288-E8A174D4D522}</Updated>
          <UpdatedBy type="versioned" defaultValue="sitecore\admin">{BADD9CF9-53E0-4D0C-BCC0-2D784C282F6A}</UpdatedBy>
          <Created type="versioned" defaultValue="$(now)">{25BED78C-4957-4165-998A-CA1B52F67497}</Created>
          <CreatedBy type="versioned" defaultValue="sitecore\admin">{5DD74568-4D4B-44C1-B513-0AF5F4CDA34F}</CreatedBy>
          <Revision type="versioned" defaultValue="$(guid)">{8CDC337E-A112-42FB-BBB4-4143751E123F}</Revision>
          
          <Workflow>{A4F985D9-98B3-4B52-AAAF-4344F6E747C6}</Workflow>
          <WorkflowState>{3E431DE1-525E-47A3-B6B0-1CCBEC3A8C98}</WorkflowState>
          -->
        </IgnoreFields>
      </json>
    </dataProviders>
    <databases>
      <database id="master">
        <dataProviders>
          <dataProvider patch:instead="dataProvider" ref="dataProviders/json" param1="$(id)">
            <!--  FILE MAPPINGS - MASTER DATABASE
                  File mapping establishes bidirectional connection between an item that lives in SQL
                  database and a JSON file. This connection makes JSON file override SQL database when
                  certain conditions are met.
                  
                  There are a number of different kinds of mappings, but all of them have "file" attribute
                  that points to specific physical file located on the file system.
            -->
            <FileMappings hint="raw:AddFileMapping">
              <!--  DEFAULT FILE MAPPING
                    This kind of mapping acts as a fall-back mapping and is taken to account only is no
                    other mappings are applied or they are not actual for the given command. It contains
                    multiple content trees that can be mapped to any data item that lives in SQL database. 
                    
                    When new item is created in the place that is not included into any other file mappings
                    then this item will be created in the default mapping *.json file.
              -->
              <DefaultMapping file="/App_Data/$(id).json" />

              <!--  ITEM CHILDREN MAPPING
                    This kind of mapping saves all new child items of the "item" item (that lives in SQL 
                    database) in the specified *.json file and reflects them back to the content tree as
                    if they are created in SQL database. Existing children of the "item" item are stored
                    in the SQL database and reflected in the content tree without any changes.
                    
                    Examples: 
                         
                    <ItemChildrenMapping file="/App_Data/content.json"             item="{0DE95AE4-41AB-4D01-9EB0-67441B7C2450}" />
                    <ItemChildrenMapping file="/App_Data/layout-layouts.json"      item="{75CC5CE4-8979-4008-9D3C-806477D57619}" />
                    <ItemChildrenMapping file="/App_Data/layout-placeholders.json" item="{1CE3B36C-9B0C-4EB5-A996-BFCB4EAA5287}" />
                    <ItemChildrenMapping file="/App_Data/layout-renderings.json"   item="{32566F0E-7686-45F1-A12F-D7260BD78BC3}" />
                    <ItemChildrenMapping file="/App_Data/system-aliases.json"      item="{5F094FE4-CC4B-40FD-9377-9AB00E7F7CA5}" />
                    <ItemChildrenMapping file="/App_Data/system-workflows.json"    item="{05592656-56D7-4D85-AACF-30919EE494F9}" />
                    <ItemChildrenMapping file="/App_Data/templates.json"           item="{3C1715FE-6A13-4FCF-845F-DE308BA9741D}" />
              -->
            </FileMappings>
          </dataProvider>
        </dataProviders>
      </database>
    </databases>
    <settings>
      <setting name="Media.BlobFolder" set:value="/App_Data/MediaBlobs" />
    </settings>
  </sitecore>
</configuration>